{"version":3,"sources":["components/header.js","components/charCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","style","background","color","className","score","topScore","charCard","onClick","counterCheck","character","alt","src","imageURL","App","state","characters","shuffleCharacters","data","datacopy","i","length","j","Math","floor","random","name","correctGuess","updatedCharacters","map","updatedCharacter","selected","console","log","handleCorrect","handleIncorrect","newScore","newTopScore","max","setState","alert","resetCharacters","this","key","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAaeA,EAXA,SAACC,GAAD,OACX,yBAAKC,MAAO,CAACC,WAAY,QAASC,MAAO,UAAWC,UAAW,oCAC3D,yBAAKA,UAAW,aACZ,sDACA,uCAAaJ,EAAMK,OACnB,2CAAiBL,EAAMM,aCWpBC,EAhBE,SAACP,GAEd,OACE,yBAAKQ,QAAS,kBAAIR,EAAMS,aAAaT,EAAMU,YAAYN,UAAU,cACjE,yBAAKO,IAAKX,EAAMU,UAAWE,IAAKZ,EAAMa,a,8jBC2G7BC,E,2MAxGbC,MAAQ,CACNC,aACAX,MAAO,EACPC,SAAU,G,EAQVW,kBAAoB,SAACC,GAEnB,IADA,IAAMC,EAAQ,YAAOD,GACZE,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADI,EAEf,CAACD,EAASG,GAAIH,EAASC,IAAnDD,EAASC,GAFkC,KAE9BD,EAASG,GAFqB,KAI9C,OAAOH,G,EAGTV,aAAe,SAACiB,GACd,IAAIC,GAAe,EAEbC,EADe,EAAKb,MAAnBC,WAC8Ba,IAAI,SAAAnB,GACvC,IAAMoB,EAAgB,KAAOpB,GAO7B,OANIoB,EAAiBJ,OAASA,IACM,IAA9BI,EAAiBC,WACnBD,EAAiBC,UAAW,EAC5BJ,GAAe,GAGZG,IAETE,QAAQC,IAAIL,GAEZD,EAAe,EAAKO,cAAcN,GAAoB,EAAKO,gBAAgBP,I,EAI7EM,cAAgB,SAAClB,GAAgB,IAAD,EACJ,EAAKD,MAAxBV,EADuB,EACvBA,MAAOC,EADgB,EAChBA,SACd0B,QAAQC,IAAI,CAAC5B,QAAOC,aAEpB,IAAM8B,EAAW/B,EAAQ,EACzB2B,QAAQC,IAAI,CAACG,aAEb,IAAMC,EAAcd,KAAKe,IAAIF,EAAU9B,GACvC0B,QAAQC,IAAI,CAACI,gBAEb,EAAKE,SAAS,CACZlC,MAAO+B,EACP9B,SAAU+B,EACVrB,WAAY,EAAKC,kBAAkBD,M,EAYvCmB,gBAAkB,SAACnB,GACjBwB,MAAM,gDACNR,QAAQC,IAAI,mBAEZ,EAAKM,SAAS,CACZvB,WAAY,EAAKyB,gBAAgBzB,GACjCX,MAAO,K,EAIXoC,gBAAkB,SAACzB,GACjB,IAAMyB,EAAkBzB,EAAWa,IAAI,SAAAnB,GAAS,YAASA,EAAT,CAAoBqB,UAAU,MAC9E,OAAO,EAAKd,kBAAkBwB,I,mFAtEhCC,KAAKH,SAAS,CACZvB,WAAY0B,KAAKzB,kBAAkByB,KAAK3B,MAAMC,gB,+BAyEvC,IAAD,OAEN,OACE,6BACO,kBAAC,EAAD,CAAQX,MAAOqC,KAAK3B,MAAMV,MAAOC,SAAUoC,KAAK3B,MAAMT,WACtD,yBAAKF,UAAU,aACd,yBAAKA,UAAU,OACVsC,KAAK3B,MAAMC,WAAWa,IAAI,SAACnB,GAAD,OAC3B,kBAAC,EAAD,CACAiC,IAAKjC,EAAUkC,GACfA,GAAKlC,EAAUkC,GACflC,UAAWA,EAAUgB,KACrBK,SAAUrB,EAAUqB,SACpBlB,SAAUH,EAAUG,SACpBJ,aAAc,EAAKA,wB,GAhGrBoC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.35fbd86d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props)=> (\n    <nav style={{background: \"black\", color: \"yellow\"}} className={\"navbar navbar-default sticky-top\"}>\n        <div className={\"container\"}>\n            <div>Car Click Memory Game</div>\n            <div>Score: {props.score}</div>\n            <div>Top score: {props.topScore}</div>\n\n        </div>\n    </nav>\n);\n\nexport default Header;","import React from 'react';\n\nconst charCard = (props) => {\n\n    return (\n      <div onClick={()=>props.counterCheck(props.character)} className=\"col-3 mt-3\">\n      <img alt={props.character} src={props.imageURL} />\n    </div>\n    )\n\n}\n\n\n\n\n\n\n\nexport default charCard;","import React, { Component } from 'react';\nimport Header from './components/header'\nimport CharacterCard from './components/charCard'\nimport './index.css'\nimport characters from './characters.json'\n\n\nclass App extends Component {\n\n  state = {\n    characters,\n    score: 0,\n    topScore: 0\n  };\n  componentDidMount(){\n    this.setState({\n      characters: this.shuffleCharacters(this.state.characters)\n    })\n  }\n\n    shuffleCharacters = (data) =>  {\n      const datacopy = [...data]\n      for (let i = datacopy.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [datacopy[i], datacopy[j]] = [datacopy[j], datacopy[i]];\n      }\n      return datacopy;\n    };\n\n    counterCheck = (name) => {      \n      let correctGuess = false;\n      const {characters} = this.state;\n      const updatedCharacters = characters.map(character => {\n        const updatedCharacter = {...character}\n        if (updatedCharacter.name === name) {\n          if (updatedCharacter.selected === false) {\n            updatedCharacter.selected = true;\n            correctGuess = true;\n          }\n        }\n        return updatedCharacter;\n      })\n      console.log(updatedCharacters);\n      \n      correctGuess ? this.handleCorrect(updatedCharacters): this.handleIncorrect(updatedCharacters)\n\n    }\n\n    handleCorrect = (characters) => {\n      const {score, topScore} = this.state;\n      console.log({score, topScore});\n      \n      const newScore = score + 1;\n      console.log({newScore});\n      \n      const newTopScore = Math.max(newScore, topScore);\n      console.log({newTopScore});\n      \n      this.setState({\n        score: newScore,\n        topScore: newTopScore,\n        characters: this.shuffleCharacters(characters)\n      })\n    }\n\n    // newTopScoreAlert = () => {\n    //   if (this.newScore === this.newTopScore) {\n    //     alert(\"Congratulations! You've reached a new high score!\")\n    //   }\n    // }\n\n   \n\n    handleIncorrect = (characters) => {\n      alert(\"You've already clicked this car! Play again?\")\n      console.log(\"handleIncorrect\");\n      \n      this.setState({\n        characters: this.resetCharacters(characters),\n        score: 0\n      })\n    }\n\n    resetCharacters = (characters) => {\n      const resetCharacters = characters.map(character => ({...character, selected: false}))\n      return this.shuffleCharacters(resetCharacters);\n    }\n\n\n    render(){\n      \n      return(\n        <div>\n               <Header score={this.state.score} topScore={this.state.topScore} />\n               <div className=\"container\">\n                <div className=\"row\">\n                    {this.state.characters.map((character) => \n                    <CharacterCard  \n                    key={character.id} \n                    id ={character.id} \n                    character={character.name} \n                    selected={character.selected}\n                    imageURL={character.imageURL}\n                    counterCheck={this.counterCheck}\n                    />)}\n                </div>\n            </div>\n        </div>\n      )\n      };\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}